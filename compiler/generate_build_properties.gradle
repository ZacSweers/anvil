def generatedDirPath = 'generated/sources/build-properties/kotlin/main'

sourceSets {
  test.java.srcDirs += "$buildDir/$generatedDirPath"
}

def generateBuildProperties = project.tasks.register('generateBuildProperties') {
  File buildPropertiesFile = new File(new File(project.buildDir, generatedDirPath), 'BuildProperties.kt')

  inputs.property 'useIR', libs.versions.config.useIr.get()
  inputs.property 'fullTestRun', libs.versions.config.fullTestRun.get()
  inputs.property 'kotlinVersion', libs.versions.kotlin.get()
  inputs.property 'kotlinPreview', rootProject.ext.kotlinPreview

  outputs.file buildPropertiesFile

  // TODO: consider removing WARNINGS_AS_ERRORS when we no longer support the old backend.
  doLast {
    buildPropertiesFile.parentFile.mkdirs()
    buildPropertiesFile.write """\
      package com.squareup.anvil.compiler
      
      internal const val USE_IR = ${rootProject.ext.kotlinUseIR}
      internal const val KOTLIN_PREVIEW = ${rootProject.ext.kotlinPreview}

      // With Kotlin 1.6 the old backend triggers deprecation warnings.
      internal const val WARNINGS_AS_ERRORS = ${rootProject.ext.kotlinUseIR && !rootProject.ext.kotlinPreview}
     
      internal const val FULL_TEST_RUN = ${rootProject.ext.fullTestRun}
    """.stripIndent()
  }
}

tasks.named("compileKotlin").configure {
  it.dependsOn generateBuildProperties
}

// So Gradle stops complaining about the missing dependency
tasks.named("runKtlintCheckOverTestSourceSet").configure {
  it.dependsOn generateBuildProperties
}
