pluginManagement {
  repositories {
    google()
    gradlePluginPortal()
    mavenCentral()
  }
}

dependencyResolutionManagement {
  versionCatalogs {
    if (System.getenv("DEP_OVERRIDES") == "true") {
      Map<String, String> overrides = new LinkedHashMap()
      def mergedProperties = System.getenv().plus(System.getProperties())
      mergedProperties.forEach { key, value ->
        String keyString = key.toString()
        if (keyString.startsWith("DEP_OVERRIDE_")) {
          overrides.put(keyString, value.toString())
        }
      }
      libs {
        for (Map.Entry<String, String> entry : overrides.entrySet()) {
          String key = entry.getKey()
          String value = entry.getValue()
          String catalogKey = key.substring("DEP_OVERRIDE_".length()).toLowerCase(Locale.US)
          println("Overriding $catalogKey with $value")
          version(catalogKey, value)
        }
      }
    }
  }

  repositories {
    google()
    mavenCentral()
    if (hasProperty("anvil.allowSnapshots")) {
      maven { url 'https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev' }
      maven { url 'https://maven.pkg.jetbrains.space/kotlin/p/kotlin/bootstrap' }
      maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots' }
      maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }
  }
}

include ':annotations'
include ':compiler'
include ':compiler-api'
include ':compiler-utils'
include ':integration-tests:code-generator'
include ':integration-tests:code-generator-tests'
include ':integration-tests:dagger-factories-only'
include ':integration-tests:library'
include ':integration-tests:mpp:android-module'
include ':integration-tests:mpp:jvm-module'
include ':integration-tests:tests'
include ':sample:app'
include ':sample:library'
include ':sample:scopes'

// Use the local version instead of a remote artifact.
includeBuild('gradle-plugin') {
  dependencySubstitution {
    substitute module('com.squareup.anvil:gradle-plugin') using project(':')
  }
}

// Include the benchmark modules if they exist.
def benchmarkSettingsFile = file('benchmark/settings.gradle')
if (benchmarkSettingsFile.exists()) {
  apply from: benchmarkSettingsFile
}
